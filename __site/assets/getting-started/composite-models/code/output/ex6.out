(measure = [RootMeanSquaredError @012],
 measurement = [11.5],
 per_fold = [[11.5]],
 per_observation = [missing],
 fitted_params_per_fold =
     [(target = (mean_and_std = (177.5, 12.233832869001711),),
       knn_regressor =
           (tree =
                NearestNeighbors.KDTree{StaticArrays.SVector{2, Float64}, Distances.Euclidean, Float64}
  Number of points: 4
  Dimensions: 2
  Metric: Distances.Euclidean(0.0)
  Reordered: true,),
       one_hot_encoder = (fitresult = OneHotEncoderResult @637,),
       machines = [Machine{OneHotEncoder,…} @594,
                   Machine{KNNRegressor,…} @930,
                   Machine{UnivariateStandardizer,…} @129],
       fitted_params_given_machine =
           OrderedCollections.LittleDict{Any, Any, Vector{Any}, Vector{Any}}(Machine{OneHotEncoder,…} @594 => (fitresult = OneHotEncoderResult @637,), Machine{KNNRegressor,…} @930 => (tree = NearestNeighbors.KDTree{StaticArrays.SVector{2, Float64}, Distances.Euclidean, Float64}
  Number of points: 4
  Dimensions: 2
  Metric: Distances.Euclidean(0.0)
  Reordered: true,), Machine{UnivariateStandardizer,…} @129 => (mean_and_std = (177.5, 12.233832869001711),)))],
 report_per_fold =
     [(target = (),
       knn_regressor = (),
       one_hot_encoder = (features_to_be_encoded = [:gender],
                          new_features = [:age, :gender__f]),
       machines = [Machine{OneHotEncoder,…} @594,
                   Machine{KNNRegressor,…} @930,
                   Machine{UnivariateStandardizer,…} @129],
       report_given_machine =
           OrderedCollections.LittleDict{Any, Any, Vector{Any}, Vector{Any}}(Machine{OneHotEncoder,…} @594 => (features_to_be_encoded = [:gender], new_features = [:age, :gender__f]), Machine{KNNRegressor,…} @930 => NamedTuple(), Machine{UnivariateStandardizer,…} @129 => NamedTuple()))],
 train_test_rows = [([1, 2, 3, 4], [5])])